set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_VERSION 1)
set(ENV{ARM_TOOL_VARIANT} "mdk_lite")
set(CPU "Cortex-M0+")

set(ARMCC_TOOLCHAIN_PATH "/opt/toolchains/arm-compiler-5.06u7/bin")

find_program(ARMCC_COMPILER armcc PATHS ${ARMCC_TOOLCHAIN_PATH})
set(CMAKE_C_COMPILER            ${ARMCC_COMPILER}      CACHE FILEPATH "C compiler")
set(CMAKE_CXX_COMPILER          ${ARMCC_COMPILER}      CACHE FILEPATH "C++ compiler")
find_program(CMAKE_AR armar PATHS ${ARMCC_TOOLCHAIN_PATH}   DOC    "ARM archiver")
find_program(CMAKE_LINKER armlink PATHS ${ARMCC_TOOLCHAIN_PATH} DOC    "ARM linker")
#set(CMAKE_ASM_COMPILER          ${ARMCC_TOOLCHAIN_PATH}/armasm     CACHE FILEPATH "Assembler")
find_program(ARMCC_FROMELF fromelf PATHS ${ARMCC_TOOLCHAIN_PATH} DOC    "ARM fromelf")

set(CMAKE_C_FLAGS "--cpu=${CPU}  --c99")
set(CMAKE_CXX_FLAGS "--cpu=${CPU} --cpp11")
set(CMAKE_ASM_FLAGS "--cpu=${CPU} -c")

set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
if(NOT EXISTS "${ARMCC_FROMELF}")
    message(STATUS ${ARMCC_FROMELF})
    message(FATAL_ERROR "ARMCC toolchain is not found, please set ARMCC_TOOLCHAIN_PATH variable correctly")
endif()

set(CMAKE_OBJCOPY ${ARMCC_FROMELF} CACHE INTERNAL "objcopy tool")
set(CMAKE_SIZE_UTIL ${ARMCC_FROMELF} CACHE INTERNAL "size tool")
# Default C compiler flags
set(CMAKE_C_FLAGS_DEBUG_INIT "-Ono_memcpy -O1 -g -DDEBUG -D__ARMCC_VERSION=6140001 -D__CC_ARM")
set(CMAKE_C_FLAGS_RELEASE_INIT "-Ono_memcpy -Otime")
set(CMAKE_C_FLAGS_MINSIZEREL_INIT "-Ono_memcpy -Space")
set(CMAKE_C_FLAGS_RELWITHDEBINFO_INIT  "-Ono_memcpy -Otime -g")
# Default C++ compiler flags
set(CMAKE_CXX_FLAGS_DEBUG_INIT "-Ono_memcpy -O1 -g -DDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE_INIT "-Ono_memcpy -Otime")
set(CMAKE_CXX_FLAGS_MINSIZEREL_INIT "-Ono_memcpy -Space")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT  "-Ono_memcpy -Otime -g")
# Default linker flags (applies to all configurations)
SET(CMAKE_EXE_LINKER_FLAGS_INIT "-ono_memcpy --cpu=${CPU}")
 
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG_INIT}" CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE_INIT}" CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL_INIT}" CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO_INIT}" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG_INIT}" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE_INIT}" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL_INIT}" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT}" CACHE STRING "" FORCE)
set(CMAKE_EXE_LINKER_FLAGS_INIT "${CMAKE_EXE_LINKER_FLAGS_INIT}" CACHE STRING "" FORCE)

include_directories("${ARMCC_TOOLCHAIN_PATH}/../include")

set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)